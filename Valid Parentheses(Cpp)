/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "()[]{}"
Output: true

Example 3:

Input: s = "(]"
Output: false

Example 4:

Input: s = "([)]"
Output: false

Example 5:

Input: s = "{[]}"
Output: true
 
Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'
*/
class Solution {
public:
    bool isValid(string s) {
        
        
        //bool valid_string = false;
        stack <char> expression;
        int charcount=0;
        
        if (s[0] == ')' ||  s[0] =='}' || s[0] ==']'){
            return false;
        }
        
        for (int i=0; i < s.length(); i++){
            charcount++;
            
            
            if (s[i] == '(' ||  s[i] =='{' || s[i] =='['){
                expression.push(s[i]);
                
            } 
            
            else if (!expression.empty() && expression.top() == '('  && s[i] == ')' ){
            
                expression.pop();  
                charcount-=2;
            }
            
             else if (!expression.empty() && expression.top() == '{'  && s[i] == '}' ){
            
                expression.pop();
                charcount-=2;
            }
            
              else if (!expression.empty() && expression.top() == '['  && s[i] == ']' ){
            
                expression.pop();
                charcount-=2;
              }
           
            
            
        }
       return expression.empty() && charcount == 0; 
    }
    
};
